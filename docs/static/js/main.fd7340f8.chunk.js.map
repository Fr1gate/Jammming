{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/InfoWindow/InfoWindow.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","bind","assertThisInitialized","handleTermChange","handleClick","handleKeyDown","state","term","onSearch","e","setState","target","value","preventDefault","keyCode","react_default","a","createElement","className","placeholder","onChange","onKeyDown","onClick","React","Component","Track","addTrack","isRemoval","onAdd","track","name","artist","album","renderAction","defaultProps","id","Tracklist","tracks","map","Track_Track_Track","key","SearchResults","Tracklist_Tracklist_Tracklist","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlist","onSave","accessToken","expiresIn","InfoWindow","getClasses","classes","visible","clickOK","info","Spotify","getAccessToken","window","location","href","match","setTimeout","history","pushState","url","concat","infoWindow","req","headers","Authorization","fetch","then","response","ok","json","statusText","jsonResponse","items","artists","uri","savePlaylist","playlistName","tracksUris","length","userID","method","body","JSON","stringify","playlistID","uris","App","infoWindowVisible","infoWindowInfo","removeTrack","updatePlaylistName","toggleInfoWindow","find","savedTrack","temp","push","filter","item","trackURIs","_this2","results","InfoWindow_InfoWindow_InfoWindow","SearchBar_SearchBar_SearchBar","SearchResults_SearchResults_SearchResults","Playlist_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd7340f8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SearchBar.css'\r\n\r\nexport default class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n    }\r\n\r\n    search(term) {\r\n        this.props.onSearch(term);\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState({\r\n            term: e.target.value\r\n        })\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.preventDefault();\r\n        this.search(this.state.term);\r\n    }\r\n\r\n    handleKeyDown(e) {\r\n        //13 - ENTER\r\n        if (e.keyCode === 13) {\r\n            this.search(this.state.term);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"SearchBar\">\r\n                <input \r\n                    placeholder=\"Enter A Song, Album, or Artist\" \r\n                    onChange={this.handleTermChange}\r\n                    onKeyDown={this.handleKeyDown}/>\r\n                <button onClick={this.handleClick}>SEARCH</button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './Track.css'\r\n\r\nexport default class Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval === true) {\r\n            return '-'\r\n        } else {\r\n            return '+'\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                <a className=\"Track-action\" onClick={this.addTrack}>{this.renderAction()}</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTrack.defaultProps = {\r\n    track: {\r\n        id: 'defID', \r\n        name: 'defName',\r\n        artist: 'defArtist',\r\n        album: 'defAlbum'\r\n    },\r\n    isRemoval: false\r\n}","import React from 'react'\r\nimport './Tracklist.css'\r\nimport Track from '../Track/Track.js'\r\n\r\nexport default class Tracklist extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {this.props.tracks.map(track => {\r\n                    return (\r\n                        <Track\r\n                        key={track.id} \r\n                        track={track} \r\n                        isRemoval={this.props.isRemoval}\r\n                        onAdd={this.props.onAdd}/>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTracklist.defaultProps = {\r\n    tracks: [\r\n        {\r\n            name: 'default Name',\r\n            artist: 'default Artist',\r\n            album: 'default Album',\r\n            id: 'default ID'\r\n        }\r\n    ]\r\n}","import React from 'react'\r\nimport './SearchResults.css'\r\nimport Tracklist from '../Tracklist/Tracklist.js'\r\n\r\nexport default class SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                {\r\n                <Tracklist \r\n                    tracks={this.props.searchResults} \r\n                    onAdd={this.props.onAdd} \r\n                    isRemoval={false}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './Playlist.css'\r\nimport Tracklist from '../Tracklist/Tracklist.js'\r\n\r\nexport default class Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.props.onNameChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input \r\n                    defaultValue={'New Playlist'} \r\n                    onChange={this.handleNameChange}/>\r\n                <Tracklist \r\n                    tracks={this.props.playlist} \r\n                    isRemoval={true}\r\n                    onAdd={this.props.onAdd}/>\r\n                <a className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPlaylist.defaultProps = {\r\n    playlist: [{}]\r\n}","const clientID = \"a95d5b29ba8e42b3b73a0a4bc23f1535\";\r\nconst redirectURI = 'https://fr1gate.github.io/Jammming/';\r\nlet accessToken;\r\nlet expiresIn;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if(accessToken)\r\n          return accessToken;\r\n        else if(window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/))\r\n        {\r\n          accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\r\n          expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\r\n      \r\n          window.setTimeout(() => accessToken = '', expiresIn*1000);\r\n          window.history.pushState('Access Token', null, '/');\r\n      \r\n          return accessToken;\r\n        }\r\n        else\r\n        {\r\n          let url = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n          window.location = url;\r\n        }\r\n    },\r\n\r\n    search(term, infoWindow) {\r\n        const accessToken = this.getAccessToken();\r\n        const req = {\r\n            headers: {Authorization: `Bearer ${accessToken}`}\r\n        };\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, req)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json()\r\n                }                    \r\n                else {\r\n                    infoWindow(response.statusText);\r\n                }\r\n            })\r\n            .then(jsonResponse => {\r\n                if (!jsonResponse.tracks.items) {\r\n                    return []\r\n                } else {\r\n                    return jsonResponse.tracks.items.map(track => {\r\n                        return {\r\n                            name: track.name,\r\n                            artist: track.artists[0].name,\r\n                            album: track.album.name,\r\n                            id: track.id,\r\n                            uri: track.uri\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        \r\n    },\r\n\r\n    savePlaylist(playlistName, tracksUris, infoWindow) {\r\n        if (!playlistName || !tracksUris || tracksUris.length < 1) {\r\n            infoWindow('Add tracks and set tracklist name!')\r\n            return;\r\n        } else {\r\n            if (!accessToken) {\r\n                accessToken = this.getAccessToken();\r\n            }\r\n            const headers = {Authorization: `Bearer ${accessToken}`};\r\n            let userID;\r\n            fetch('https://api.spotify.com/v1/me', {headers: headers})\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        return response.json()\r\n                    }                    \r\n                    else {\r\n                        infoWindow(response.statusText);\r\n                    }\r\n                }).then(jsonResponse => {\r\n                    userID = jsonResponse.id;\r\n                    return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n                        headers: headers,\r\n                        method: 'POST',\r\n                        body: JSON.stringify({name: playlistName})\r\n                    })\r\n                    .then(response => {\r\n                        if (response.ok) {\r\n                            return response.json()\r\n                        }                    \r\n                        else {\r\n                            infoWindow(response.statusText);\r\n                        }\r\n                    })\r\n                    .then(jsonResponse => {\r\n                        const playlistID = jsonResponse.id;\r\n                        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\r\n                            headers: headers,\r\n                            method: 'POST',\r\n                            body: JSON.stringify({uris: tracksUris})\r\n                        }).then(response => infoWindow(response.statusText || \"Playlist created\"));\r\n                    })\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react'\r\nimport './InfoWindow.css'\r\n\r\nexport default class InfoWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getClasses = this.getClasses.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    getClasses() {\r\n        let classes = 'info-window';\r\n        if (this.props.visible) {\r\n            classes += ' visible'\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.clickOK();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.getClasses()}>\r\n                <p>{this.props.info}</p>\r\n                <button onClick={this.handleClick}>OK</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport SearchBar from '../SearchBar/SearchBar.js'\r\nimport SearchResults from '../SearchResults/SearchResults.js'\r\nimport Playlist from '../Playlist/Playlist.js'\r\nimport InfoWindow from '../InfoWindow/InfoWindow.js'\r\nimport Spotify from '../../util/Spotify.js'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchResults: [],\r\n      playlist: [],\r\n      playlistName: 'Default Playlist Name',\r\n      infoWindowVisible: false, \r\n      infoWindowInfo: 'Default info'\r\n    }\r\n\r\n    /////// BINDS ///////\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.toggleInfoWindow = this.toggleInfoWindow.bind(this);\r\n  }\r\n\r\n  toggleInfoWindow(info) {\r\n    if (info) {\r\n      this.setState({\r\n        infoWindowInfo: info\r\n      })\r\n    } \r\n    this.setState({\r\n      infoWindowVisible: this.state.infoWindowVisible?false:true\r\n    })\r\n  }\r\n\r\n  addTrack(track) {\r\n    if (this.state.playlist.find(\r\n      savedTrack => savedTrack.id === track.id\r\n      )) {\r\n      return;\r\n    } \r\n\r\n    let temp = this.state.playlist;\r\n    temp.push(track);\r\n\r\n    this.setState({\r\n      playlist: temp\r\n    });\r\n  }\r\n\r\n  removeTrack(track) {\r\n    let temp = this.state.playlist.filter(\r\n      item => item.id !== track.id);\r\n    this.setState({\r\n      playlist: temp\r\n    });\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({\r\n      playlistName: name\r\n    })\r\n  }\r\n\r\n  savePlaylist() {\r\n    let trackURIs = this.state.playlist.map(track => track.uri);\r\n\r\n    Spotify.savePlaylist(this.state.playlistName, trackURIs, this.toggleInfoWindow)\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term, this.toggleInfoWindow).then(results => {\r\n      this.setState({\r\n        searchResults: results\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <InfoWindow visible={this.state.infoWindowVisible} info={this.state.infoWindowInfo} clickOK={this.toggleInfoWindow}/>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n          <SearchBar \r\n            onSearch={this.search}/>\r\n          <div className=\"App-playlist\">\r\n            <SearchResults \r\n              searchResults={this.state.searchResults}\r\n              onAdd={this.addTrack}/>\r\n            <Playlist \r\n              playlist={this.state.playlist}\r\n              onAdd={this.removeTrack}\r\n              onNameChange={this.updatePlaylistName}\r\n              onSave={this.savePlaylist}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}